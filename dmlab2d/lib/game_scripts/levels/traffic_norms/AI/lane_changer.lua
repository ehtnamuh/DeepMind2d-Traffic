---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by samin.
--- DateTime: 25/11/2022 15:32
---
local aiHelper = require 'AI.avatar_ai_helper'
local map_interpreter = require 'AI.map_interpreter'

local LaneChanger = {}
LaneChanger.__index = LaneChanger
-- Lane Changing logic
function LaneChanger:LaneChange(grid, piece, orientation, rayCastLength)
    if(rayCastLength == nil) then
        rayCastLength = 4
    end
    -- Length for which lane is checked
    local me_position = grid:position(piece)

    -- Check if car is in lane
    local trigger = map_interpreter:TriggerInterpreter(map_interpreter:ExtractTrigger(me_position, 64))
    if(trigger ~= "lane") then return 'X' end

    -- calculate direction of rayCast from orientation
    local direction = aiHelper:orientation_to_position({ 0, 0 }, orientation, rayCastLength)
    -- get offset from piece in front, ignore hit bool, piece object.
    local _, _, me_offset = grid:rayCastDirection(grid:layer(piece), me_position, direction)

    -- search walkableNeighbours for valid lanes to switch to
    local walkableNeighbour = aiHelper:walkable_nodes(grid, me_position, grid:layer(piece))
    local max_offset_dist = aiHelper:L2_distance({0,0}, me_offset)
    local selected_lane = 'X'

    for tempOrientation, position in pairs(walkableNeighbour) do
        local waypoint = map_interpreter:ExtractWaypoint(position, 64)
        local newOrientations = map_interpreter:waypointInterpreter(waypoint, orientation)
        if (#newOrientations > 2) then
            break
        end
        if (newOrientations[1] == orientation) then
            direction = aiHelper:orientation_to_position({ 0, 0 }, orientation, rayCastLength)
            local _, _, offset = grid:rayCastDirection(grid:layer(piece), position, direction)
            if (aiHelper:L2_distance({0,0}, offset) > max_offset_dist) then
                max_offset_dist = aiHelper:L2_distance({0,0}, offset)
                selected_lane = tempOrientation
            end
        end
    end
    return selected_lane
end

return LaneChanger