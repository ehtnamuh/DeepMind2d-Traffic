---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by samin.
--- DateTime: 10/16/22 3:15 PM
---


local maps = require 'maps'
local tables = require 'common.tables'


local MapWrapper = {}
MapWrapper.__index = MapWrapper

-- Waypoint follower map character to allowed-actions
function MapWrapper:waypointInterpreter(waypoint)
    local indexToWaypoints = {
        ["1"] = { 'N', 'E' },
        ["2"] = { 'N', 'W' },
        ["3"] = { 'N', 'S' },
        ["4"] = { 'S', 'E' },
        ["5"] = { 'S', 'W' },
        ["6"] = { 'E', 'W' },
        ["B"] = { 'N', 'E', 'S', 'W' },
        ["E"] = { 'E' },
        ["W"] = { 'W' },
        ["N"] = { 'N' },
        ["S"] = { 'S' }
    }
    return indexToWaypoints[waypoint]
end

--
function MapWrapper:TriggerInterpreter(waypoint)
    local indexToTrigger= {
        ["1"] = "intersection",
        ["2"] = "lane"
    }
    return indexToTrigger[waypoint]
end


function MapWrapper:filterMove(newOrientations, orientation, walkableNeighbour, last_waypoint)
    -- MOVE FILTRATION
    -- car already branched on a previous node and cannot branch consecutively
    if (last_waypoint == 'B') then
        return { orientation }
    end
    -- remove illegal nodes
    for key, newOrientation in pairs(newOrientations) do
        local isMoveValid = false
        for tempOrientation, neighbour in pairs(walkableNeighbour) do
            if (tempOrientation == newOrientation) then
                isMoveValid = true
            end
        end
        if (not isMoveValid) then
            tables.removeValue(newOrientations, newOrientation)
        end
    end
    -- remove 180 turn
    local oppositeOrientation = {
        ['E'] = 'W',
        ['W'] = 'E',
        ['N'] = 'S',
        ['S'] = 'N'
    }
    if (#newOrientations > 1) then
        tables.removeValue(newOrientations, oppositeOrientation[orientation])
    end
    return newOrientations
end

function MapWrapper:CoordinateTranslation(position, imgWidth)
    local map_coordinate = (position[2] * (imgWidth + 1)) + position[1] + 1
    return map_coordinate
end

function MapWrapper:ExtractWaypoint(position, imgWidth)
    local map = maps["logic"].layout
    local map_coordinate = self:CoordinateTranslation(position, imgWidth)
    local waypoint =map:sub(map_coordinate, map_coordinate)
    return waypoint
end

function MapWrapper:ExtractTrigger(position, imgWidth)
    local map = maps["trigger"].layout
    local map_coordinate = self:CoordinateTranslation(position, imgWidth)
    local waypoint =map:sub(map_coordinate, map_coordinate)
    return waypoint
end

return MapWrapper